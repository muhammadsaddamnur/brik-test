// Mocks generated by Mockito 5.4.6 from annotations
// in store/test/bloc/category_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:store/core/error/failures.dart' as _i6;
import 'package:store/features/category/data/models/category_model.dart' as _i7;
import 'package:store/features/category/domain/repositories/category_repository.dart'
    as _i2;
import 'package:store/features/category/domain/usecases/delete_category_usecase.dart'
    as _i9;
import 'package:store/features/category/domain/usecases/get_category_list_usecase.dart'
    as _i4;
import 'package:store/features/category/domain/usecases/save_category_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeCategoryRepository_0 extends _i1.SmartFake
    implements _i2.CategoryRepository {
  _FakeCategoryRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCategoryListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoryListUseCase extends _i1.Mock
    implements _i4.GetCategoryListUseCase {
  MockGetCategoryListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get categoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#categoryRepository),
            returnValue: _FakeCategoryRepository_0(
              this,
              Invocation.getter(#categoryRepository),
            ),
          )
          as _i2.CategoryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.CategoryModel>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, List<_i7.CategoryModel>>
                >.value(
                  _FakeEither_1<_i6.Failure, List<_i7.CategoryModel>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.CategoryModel>>>);
}

/// A class which mocks [SaveCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveCategoryUseCase extends _i1.Mock
    implements _i8.SaveCategoryUseCase {
  MockSaveCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get categoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#categoryRepository),
            returnValue: _FakeCategoryRepository_0(
              this,
              Invocation.getter(#categoryRepository),
            ),
          )
          as _i2.CategoryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call({
    required _i7.CategoryModel? categoryModel,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#categoryModel: categoryModel}),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [], {#categoryModel: categoryModel}),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategoryUseCase extends _i1.Mock
    implements _i9.DeleteCategoryUseCase {
  MockDeleteCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryRepository get categoryRepository =>
      (super.noSuchMethod(
            Invocation.getter(#categoryRepository),
            returnValue: _FakeCategoryRepository_0(
              this,
              Invocation.getter(#categoryRepository),
            ),
          )
          as _i2.CategoryRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call({required int? index}) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#index: index}),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [], {#index: index}),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
