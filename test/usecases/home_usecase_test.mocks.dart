// Mocks generated by Mockito 5.4.6 from annotations
// in store/test/usecases/home_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:store/core/error/failures.dart' as _i5;
import 'package:store/features/home/data/models/product_model.dart' as _i6;
import 'package:store/features/home/domain/repositories/home_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveProduct({
    required _i6.Product? product,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveProduct, [], {#product: product}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#saveProduct, [], {#product: product}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ProductModel>> getProductList({
    required int? page,
    String? search,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProductList, [], {
              #page: page,
              #search: search,
            }),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.ProductModel>>.value(
                  _FakeEither_0<_i5.Failure, _i6.ProductModel>(
                    this,
                    Invocation.method(#getProductList, [], {
                      #page: page,
                      #search: search,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.ProductModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteProduct({
    required String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [], {#id: id}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteProduct, [], {#id: id}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateProduct({
    required _i6.Product? product,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [], {#product: product}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#updateProduct, [], {#product: product}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
